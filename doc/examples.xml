#############################################################################
##
#W  examples.xml
#Y  Copyright (C) 2019                              Murray T. Whyte
##
##  Licensing information can be found in the README file of this package.
##
#############################################################################
##

<#GAPDoc Label="PetersenGraph">
<ManSection>
  <Attr Name="PetersenGraph" Arg=""/>
  <Returns>A digraph.</Returns>
  <Description>

    From <URL>https://en.wikipedia.org/wiki/Petersen_graph</URL>:<P/>

    <Q>The Petersen graph is an undirected graph with 10 vertices and 15 edges.
    It is a small graph that serves as a useful example and counterexample for
    many problems in graph theory. The Petersen graph is named after Julius
    Petersen, who in 1898 constructed it to be the smallest bridgeless cubic
    graph with no three-edge-coloring.</Q><P/>

    See also <Ref Func="GeneralisedPetersenGraph"/>.

<Example><![CDATA[
gap> ChromaticNumber(PetersenGraph());
3
]]></Example>
  </Description>
</ManSection>
<#/GAPDoc>

<#GAPDoc Label="GeneralisedPetersenGraph">
<ManSection>
  <Attr Name="GeneralisedPetersenGraph" Arg="n, k"/>
  <Returns>A digraph.</Returns>
  <Description>
    If <A>n</A> is a positive integer and <A>k</A> is a non-negative
    integer less than <C><A>n</A> / 2</C>, then this operation returns
    the <E>generalised Petersen graph</E> <M>GPG(<A>n</A>, k)</M>. <P/>

    From
    <URL>https://en.wikipedia.org/wiki/Generalized_Petersen_graph</URL>:
    <P/>

    <Q>The generalized Petersen graphs are a family of cubic
    graphs formed by connecting the vertices of a regular polygon to the
    corresponding vertices of a star polygon. They include the Petersen graph
    and generalize one of the ways of constructing the Petersen graph. The
    generalized Petersen graph family was introduced in 1950 by H. S. M.
    Coxeter and was given its name in 1969 by Mark Watkins.</Q>
    <P/>

    See also <Ref Func="PetersenGraph"/>.

<Example><![CDATA[
gap> GeneralisedPetersenGraph(7, 2);
<immutable digraph with 14 vertices, 42 edges>
gap> GeneralisedPetersenGraph(40, 1);
<immutable digraph with 80 vertices, 240 edges>
gap> D := GeneralisedPetersenGraph(5, 2);
<immutable digraph with 10 vertices, 30 edges>
gap> IsIsomorphicDigraph(D, PetersenGraph());
true
gap> GeneralisedPetersenGraph(IsMutableDigraph, 9, 4);
<mutable digraph with 18 vertices, 54 edges>
]]></Example>
  </Description>
</ManSection>
<#/GAPDoc>

<#GAPDoc Label="JohnsonDigraph">
<ManSection>
  <Oper Name="JohnsonDigraph" Arg="n, k"/>
  <Returns>A digraph.</Returns>
  <Description>
    If <A>n</A> and <A>k</A> are non-negative integers, then this operation
    returns a symmetric digraph which corresponds to the undirected <E>Johnson
    graph</E> <M>J(n, k)</M>. <P/>

    The <E>Johnson graph</E> <M>J(n, k)</M> has vertices given by all the
    <A>k</A>-subsets of the range <C>[1 .. <A>n</A>]</C>, and two vertices are
    connected by an edge iff their intersection has size <M><A>k</A> - 1</M>.

    <Example><![CDATA[
gap> gr := JohnsonDigraph(3, 1);
<immutable digraph with 3 vertices, 6 edges>
gap> OutNeighbours(gr);
[ [ 2, 3 ], [ 1, 3 ], [ 1, 2 ] ]
gap> gr := JohnsonDigraph(4, 2);
<immutable digraph with 6 vertices, 24 edges>
gap> OutNeighbours(gr);
[ [ 2, 3, 4, 5 ], [ 1, 3, 4, 6 ], [ 1, 2, 5, 6 ], [ 1, 2, 5, 6 ], 
  [ 1, 3, 4, 6 ], [ 2, 3, 4, 5 ] ]
gap> JohnsonDigraph(1, 0);
<immutable digraph with 1 vertex, 0 edges>
]]></Example>
  </Description>
</ManSection>
<#/GAPDoc>
