#############################################################################
##
#W  examples.xml
#Y  Copyright (C) 2019                              Murray T. Whyte
##
##  Licensing information can be found in the README file of this package.
##
#############################################################################
##

<#GAPDoc Label="EmptyDigraph">
<ManSection>
  <Oper Name="EmptyDigraph" Arg="[filt, ]n"/>
  <Oper Name="NullDigraph" Arg="[filt, ]n"/>
  <Returns>A digraph.</Returns>
  <Description>
    If <A>n</A> is a non-negative integer, this function returns the
    <E>empty</E> or <E>null</E> digraph with <A>n</A> vertices. An empty
    digraph is one with no edges.
    <P/>
      
    If the optional first argument <A>filt</A> is present, then this should
    specify the category or representation the digraph being created will
    belong to. For example, if <A>filt</A> is <Ref Filt="IsMutableDigraph"/>,
    then the digraph being created will be mutable, if <A>filt</A> is <Ref
    Filt="IsImmutableDigraph"/>, then the digraph will be immutable. 
    If the optional first argument <A>filt</A> is not present, then <Ref
      Filt="IsImmutableDigraph"/> is used by default.<P/>

    <C>NullDigraph</C> is a synonym for <C>EmptyDigraph</C>.

    <Example><![CDATA[
gap> EmptyDigraph(20);
<immutable empty digraph with 20 vertices>
gap> NullDigraph(10);
<immutable empty digraph with 10 vertices>
gap> EmptyDigraph(IsMutableDigraph, 10);
<mutable empty digraph with 10 vertices>]]></Example>
  </Description>
</ManSection>
<#/GAPDoc>

<#GAPDoc Label="CompleteBipartiteDigraph">
<ManSection>
  <Oper Name="CompleteBipartiteDigraph" Arg="[filt, ]m, n"/>
  <Returns>A digraph.</Returns>
  <Description>
    A complete bipartite digraph is a digraph whose vertices
    can be partitioned into two non-empty vertex sets, such there exists
    a unique edge with source <C>i</C> and range <C>j</C> if and only if
    <C>i</C> and <C>j</C> lie in different vertex sets. <P/>

    If <A>m</A> and <A>n</A> are positive integers, this function
    returns the complete bipartite digraph with vertex sets of sizes
    <A>m</A> (containing the vertices <C>[1 .. m]</C>) and
    <A>n</A> (containing the vertices <C>[m + 1 .. m + n]</C>).
    <P/>

    If the optional first argument <A>filt</A> is present, then this should
    specify the category or representation the digraph being created will
    belong to. For example, if <A>filt</A> is <Ref Filt="IsMutableDigraph"/>,
    then the digraph being created will be mutable, if <A>filt</A> is <Ref
    Filt="IsImmutableDigraph"/>, then the digraph will be immutable. 
    If the optional first argument <A>filt</A> is not present, then <Ref
      Filt="IsImmutableDigraph"/> is used by default.

    <Example><![CDATA[
gap> CompleteBipartiteDigraph(2, 3);
<immutable complete bipartite digraph with bicomponent sizes 2 and 3>
gap> CompleteBipartiteDigraph(IsMutableDigraph, 3, 2);
<mutable digraph with 5 vertices, 12 edges>
]]></Example>
  </Description>
</ManSection>
<#/GAPDoc>

<#GAPDoc Label="CompleteMultipartiteDigraph">
  <ManSection>
    <Oper Name="CompleteMultipartiteDigraph" Arg = "[filt, ]orders"/>
    <Returns>A digraph.</Returns>
    <Description>
      For a list <A>orders</A> of <C>n</C> positive integers,
      this function returns the digraph containing <C>n</C> independent sets
      of vertices of orders <C>[<A>l</A>[1] .. <A>l</A>[n]]</C>. Moreover,
      each vertex is adjacent to every other not contained in the
      same independent set.
      <P/>

      If the optional first argument <A>filt</A> is present, then this should
      specify the category or representation the digraph being created will
      belong to. For example, if <A>filt</A> is <Ref Filt="IsMutableDigraph"/>,
      then the digraph being created will be mutable, if <A>filt</A> is <Ref
      Filt="IsImmutableDigraph"/>, then the digraph will be immutable. 
      If the optional first argument <A>filt</A> is not present, then <Ref
        Filt="IsImmutableDigraph"/> is used by default.
      <Example><![CDATA[
gap> CompleteMultipartiteDigraph([5, 4, 2]);
<immutable complete multipartite digraph with 11 vertices, 76 edges>
gap> CompleteMultipartiteDigraph(IsMutableDigraph, [5, 4, 2]);
<mutable digraph with 11 vertices, 76 edges>
]]></Example>
  </Description>
</ManSection>
<#/GAPDoc>

<#GAPDoc Label="CompleteDigraph">
<ManSection>
  <Oper Name="CompleteDigraph" Arg="[filt, ]n"/>
  <Returns>A digraph.</Returns>
  <Description>
    If <A>n</A> is a non-negative integer, this function returns the complete
    digraph with <A>n</A> vertices. See <Ref Prop="IsCompleteDigraph"/>. <P/>

    If the optional first argument <A>filt</A> is present, then this should
    specify the category or representation the digraph being created will
    belong to. For example, if <A>filt</A> is <Ref Filt="IsMutableDigraph"/>,
    then the digraph being created will be mutable, if <A>filt</A> is <Ref
    Filt="IsImmutableDigraph"/>, then the digraph will be immutable. 
    If the optional first argument <A>filt</A> is not present, then <Ref
      Filt="IsImmutableDigraph"/> is used by default.
    <Example><![CDATA[
gap> CompleteDigraph(20);
<immutable complete digraph with 20 vertices>
gap> CompleteDigraph(IsMutableDigraph, 10);
<mutable digraph with 10 vertices, 90 edges>
]]></Example>
  </Description>
</ManSection>
<#/GAPDoc>

<#GAPDoc Label="ChainDigraph">
<ManSection>
  <Oper Name="ChainDigraph" Arg="[filt, ]n"/>
  <Returns>A digraph.</Returns>
  <Description>
    If <A>n</A> is a positive integer, this function returns a chain
    with <A>n</A> vertices and <C><A>n</A> - 1</C> edges.
    Specifically,
    for each vertex <C>i</C> (with <C>i</C> &lt; <C>n</C>), there is a directed
    edge with source <C>i</C> and range <C>i + 1</C>. <P/>

    If the optional first argument <A>filt</A> is present, then this should
    specify the category or representation the digraph being created will
    belong to. For example, if <A>filt</A> is <Ref Filt="IsMutableDigraph"/>,
    then the digraph being created will be mutable, if <A>filt</A> is <Ref
    Filt="IsImmutableDigraph"/>, then the digraph will be immutable. 
    If the optional first argument <A>filt</A> is not present, then <Ref
      Filt="IsImmutableDigraph"/> is used by default.<P/>

    The <Ref Oper="DigraphReflexiveTransitiveClosure"/> of a chain represents a
    total order.
    <Example><![CDATA[
gap> ChainDigraph(42);
<immutable chain digraph with 42 vertices>
gap> ChainDigraph(IsMutableDigraph, 10);
<mutable digraph with 10 vertices, 9 edges>
]]></Example>
  </Description>
</ManSection>
<#/GAPDoc>

<#GAPDoc Label="CycleDigraph">
<ManSection>
  <Oper Name="CycleDigraph" Arg="[filt, ]n"/>
  <Oper Name="DigraphCycle" Arg="[filt, ]n"/>
  <Returns>A digraph.</Returns>
  <Description>
    If <A>n</A> is a positive integer, then these functions return a <E>cycle
    digraph</E> with <A>n</A> vertices and <A>n</A> edges. Specifically,
    for each vertex <C>i</C> (with <C>i</C> &lt; <C>n</C>), there is a directed
    edge with source <C>i</C> and range <C>i + 1</C>. In addition, there is
    an edge with source <C>n</C> and range <C>1</C>. <P/>

    If the optional first argument <A>filt</A> is present, then this should
    specify the category or representation the digraph being created will
    belong to. For example, if <A>filt</A> is <Ref Filt="IsMutableDigraph"/>,
    then the digraph being created will be mutable, if <A>filt</A> is <Ref
    Filt="IsImmutableDigraph"/>, then the digraph will be immutable. 
    If the optional first argument <A>filt</A> is not present, then <Ref
    Filt="IsImmutableDigraph"/> is used by default.
  <Example><![CDATA[
gap> CycleDigraph(1);
<immutable digraph with 1 vertex, 1 edge>
gap> CycleDigraph(123);
<immutable cycle digraph with 123 vertices>
gap> CycleDigraph(IsMutableDigraph, 10);
<mutable digraph with 10 vertices, 10 edges>
gap> DigraphCycle(4) = CycleDigraph(4);
true
]]></Example>
  </Description>
</ManSection>
<#/GAPDoc>

<#GAPDoc Label="JohnsonDigraph">
<ManSection>
  <Oper Name="JohnsonDigraph" Arg="[filt, ]n, k"/>
  <Returns>A digraph.</Returns>
  <Description>
    If <A>n</A> and <A>k</A> are non-negative integers, then this operation
    returns a symmetric digraph which corresponds to the undirected <E>Johnson
    graph</E> <M>J(n, k)</M>. <P/>

    If the optional first argument <A>filt</A> is present, then this should
    specify the category or representation the digraph being created will
    belong to. For example, if <A>filt</A> is <Ref Filt="IsMutableDigraph"/>,
    then the digraph being created will be mutable, if <A>filt</A> is <Ref
    Filt="IsImmutableDigraph"/>, then the digraph will be immutable. 
    If the optional first argument <A>filt</A> is not present, then <Ref
      Filt="IsImmutableDigraph"/> is used by default.<P/>

    The <E>Johnson graph</E> <M>J(n, k)</M> has vertices given by all the
    <A>k</A>-subsets of the range <C>[1 .. <A>n</A>]</C>, and two vertices are
      connected by an edge iff their intersection has size <M><A>k</A> - 1</M>.

    <Example><![CDATA[
gap> gr := JohnsonDigraph(3, 1);
<immutable symmetric digraph with 3 vertices, 6 edges>
gap> OutNeighbours(gr);
[ [ 2, 3 ], [ 1, 3 ], [ 1, 2 ] ]
gap> gr := JohnsonDigraph(4, 2);
<immutable symmetric digraph with 6 vertices, 24 edges>
gap> OutNeighbours(gr);
[ [ 2, 3, 4, 5 ], [ 1, 3, 4, 6 ], [ 1, 2, 5, 6 ], [ 1, 2, 5, 6 ], 
  [ 1, 3, 4, 6 ], [ 2, 3, 4, 5 ] ]
gap> JohnsonDigraph(1, 0);
<immutable empty digraph with 1 vertex>
gap> JohnsonDigraph(IsMutableDigraph, 1, 0);
<mutable empty digraph with 1 vertex>
]]></Example>
  </Description>
</ManSection>
<#/GAPDoc>

<#GAPDoc Label="PetersenGraph">
<ManSection>
  <Oper Name="PetersenGraph" Arg="[filt]"/>
  <Returns>A digraph.</Returns>
  <Description>

    From <URL>https://en.wikipedia.org/wiki/Petersen_graph</URL>:<P/>

    <Q>The Petersen graph is an undirected graph with 10 vertices and 15 edges.
    It is a small graph that serves as a useful example and counterexample for
    many problems in graph theory. The Petersen graph is named after Julius
    Petersen, who in 1898 constructed it to be the smallest bridgeless cubic
    graph with no three-edge-coloring.</Q><P/>
    
    If the optional first argument <A>filt</A> is present, then this should
    specify the category or representation the digraph being created will
    belong to. For example, if <A>filt</A> is <Ref Filt="IsMutableDigraph"/>,
    then the digraph being created will be mutable, if <A>filt</A> is <Ref
    Filt="IsImmutableDigraph"/>, then the digraph will be immutable. 
    If the optional first argument <A>filt</A> is not present, then <Ref
      Filt="IsImmutableDigraph"/> is used by default.<P/>

    See also <Ref Oper="GeneralisedPetersenGraph"/>.

<Example><![CDATA[
gap> ChromaticNumber(PetersenGraph());
3
gap> PetersenGraph(IsMutableDigraph);
<mutable digraph with 10 vertices, 30 edges>
]]></Example>
  </Description>
</ManSection>
<#/GAPDoc>

<#GAPDoc Label="GeneralisedPetersenGraph">
<ManSection>
  <Oper Name="GeneralisedPetersenGraph" Arg="[filt, ]n, k"/>
  <Returns>A digraph.</Returns>
  <Description>
    If <A>n</A> is a positive integer and <A>k</A> is a non-negative
    integer less than <C><A>n</A> / 2</C>, then this operation returns
    the <E>generalised Petersen graph</E> <M>GPG(<A>n</A>, k)</M>. <P/>

    From
    <URL>https://en.wikipedia.org/wiki/Generalized_Petersen_graph</URL>:
    <P/>

    <Q>The generalized Petersen graphs are a family of cubic
    graphs formed by connecting the vertices of a regular polygon to the
    corresponding vertices of a star polygon. They include the Petersen graph
    and generalize one of the ways of constructing the Petersen graph. The
    generalized Petersen graph family was introduced in 1950 by H. S. M.
    Coxeter and was given its name in 1969 by Mark Watkins.</Q>
    <P/>

    If the optional first argument <A>filt</A> is present, then this should
    specify the category or representation the digraph being created will
    belong to. For example, if <A>filt</A> is <Ref Filt="IsMutableDigraph"/>,
    then the digraph being created will be mutable, if <A>filt</A> is <Ref
    Filt="IsImmutableDigraph"/>, then the digraph will be immutable. 
    If the optional first argument <A>filt</A> is not present, then <Ref
      Filt="IsImmutableDigraph"/> is used by default.<P/>

    See also <Ref Oper="PetersenGraph"/>.

<Example><![CDATA[
gap> GeneralisedPetersenGraph(7, 2);
<immutable symmetric digraph with 14 vertices, 42 edges>
gap> GeneralisedPetersenGraph(40, 1);
<immutable symmetric digraph with 80 vertices, 240 edges>
gap> D := GeneralisedPetersenGraph(5, 2);
<immutable symmetric digraph with 10 vertices, 30 edges>
gap> IsIsomorphicDigraph(D, PetersenGraph());
true
gap> GeneralisedPetersenGraph(IsMutableDigraph, 9, 4);
<mutable digraph with 18 vertices, 54 edges>
]]></Example>
  </Description>
</ManSection>
<#/GAPDoc>

<#GAPDoc Label="LollipopGraph">
<ManSection>
  <Oper Name="LollipopGraph" Arg="[filt, ]m, n"/>
  <Returns>A digraph</Returns>
  <Description>
    If <A>m</A> and <A>n</A> are positive integers,
    then this operation returns the <E>(<A>m</A>,<A>n</A>)-lollipop graph</E>.
    As defined at <URL>https://en.wikipedia.org/wiki/Lollipop_graph</URL>,
    this consists of a complete digraph on the vertices <C>[1..<A>m</A>]</C>
    (the 'head' of the lollipop),
    and the symmetric closure of a chain digraph on the remaining <A>n</A>
    vertices (the 'stick'),
    connected by a bridge
    (the edge <C>[<A>m</A>, <A>m</A>+1]</C> and its reverse). <P/>

    If the optional first argument <A>filt</A> is present, then this should
    specify the category or representation the digraph being created will
    belong to. For example, if <A>filt</A> is <Ref Filt="IsMutableDigraph"/>,
    then the digraph being created will be mutable, if <A>filt</A> is <Ref
    Filt="IsImmutableDigraph"/>, then the digraph will be immutable.
    If the optional first argument <A>filt</A> is not present, then <Ref
      Filt="IsImmutableDigraph"/> is used by default.

<Example><![CDATA[
gap> D := LollipopGraph(5, 3);
<immutable connected symmetric digraph with 8 vertices, 26 edges>
gap> CliqueNumber(D);
5
gap> DigraphUndirectedGirth(D);
3
gap> LollipopGraph(IsMutableDigraph, 3, 8);
<mutable digraph with 11 vertices, 22 edges>
]]></Example>
  </Description>
</ManSection>
<#/GAPDoc>

<#GAPDoc Label="KingsGraph">
<ManSection>
  <Oper Name="KingsGraph" Arg="[filt, ]n, k"/>
  <Returns>A digraph.</Returns>
  <Description>
    If <A>n</A> and <A>k</A> are positive integers,
    then this operation returns
    the <E>king's graph</E> for an <A>n</A> by <A>k</A> board. <P/>

    From
    <URL>https://en.wikipedia.org/wiki/King%27s_graph</URL>:
    <P/>

    <Q>In graph theory, a king's graph is a graph that represents all legal 
    moves of the king chess piece on a chessboard where each vertex represents 
    a square on a chessboard and each edge is a legal move. More specifically, 
    an <A>n</A> by <A>k</A> king's graph is a king's graph of an <A>n</A> by
    <A>k</A> chessboard. It is the map graph formed from the squares of a chessboard 
    by making a vertex for each square and an edge for each two squares that 
    share an edge or a corner. It can also be constructed as the strong product 
    of two path graphs.</Q>
    <P/>
    
    In particular, the <C><A>n</A> * <A>k</A></C>  vertices can be arranged
    into an <A>n</A> by <A>k</A> grid such that two vertices are adjacent in
    the digraph if and only if they are orthogonally or diagonally adjacent in the grid.
    The correspondence between vertices and grid positions is given by
    <Ref Oper="DigraphVertexLabels"/>.  <P/>
    
    See also <Ref Oper="SquareGridGraph"/> and
    <Ref Oper="TriangularGridGraph"/>. <P/>
    
    If the optional first argument <A>filt</A> is present, then this should
    specify the category or representation the digraph being created will
    belong to. For example, if <A>filt</A> is <Ref Filt="IsMutableDigraph"/>,
    then the digraph being created will be mutable, if <A>filt</A> is <Ref
    Filt="IsImmutableDigraph"/>, then the digraph will be immutable.
    If the optional first argument <A>filt</A> is not present, then <Ref
      Filt="IsImmutableDigraph"/> is used by default.<P/>
    
    <Example><![CDATA[
gap> KingsGraph(8, 8);
<immutable connected symmetric digraph with 64 vertices, 420 edges>
gap> D := KingsGraph(IsMutable, 2, 7);
<mutable digraph with 14 vertices, 62 edges>
gap> IsPlanarDigraph(D);
true
gap> D := KingsGraph(3, 3);
<immutable connected symmetric digraph with 9 vertices, 40 edges>
gap> OutNeighbors(D);
[ [ 2, 4, 5 ], [ 1, 3, 5, 4, 6 ], [ 2, 6, 5 ], [ 5, 1, 7, 2, 8 ], 
  [ 4, 6, 2, 8, 3, 7, 1, 9 ], [ 5, 3, 9, 8, 2 ], [ 8, 4, 5 ], 
  [ 7, 9, 5, 6, 4 ], [ 8, 6, 5 ] ]
]]></Example>
  </Description>
</ManSection>
<#/GAPDoc>

<#GAPDoc Label="SquareGridGraph">
<ManSection>
  <Oper Name="SquareGridGraph" Arg="[filt, ]n, k"/>
  <Oper Name="GridGraph" Arg="[filt, ]n, k"/>
  <Returns>A digraph.</Returns>
  <Description>
    If <A>n</A> and <A>k</A> are positive integers, then this operation returns
    a square grid graph of dimension <A>n</A> by <A>k</A>. <P/>

    A <E>square grid graph</E> of dimension <A>n</A> by <A>k</A> is the
    <Ref Func="DigraphCartesianProduct"
      Label="for a positive number of digraphs" /> of the
    symmetric closures of the chain digraphs with <A>n</A> and <A>k</A>
    vertices; see <Ref Oper="DigraphSymmetricClosure"/> and
    <Ref Oper="ChainDigraph"/>.  <P/>

    In particular, the <C><A>n</A> * <A>k</A></C>  vertices can be arranged
    into an <A>n</A> by <A>k</A> grid such that two vertices are adjacent in
    the digraph if and only if they are orthogonally adjacent in the grid.
    The correspondence between vertices and grid positions is given by
    <Ref Oper="DigraphVertexLabels"/>.  <P/>

    See <URL>https://en.wikipedia.org/wiki/Lattice_graph</URL>
    for more information.  <P/>

    If the optional first argument <A>filt</A> is present, then this should
    specify the category or representation the digraph being created will
    belong to. For example, if <A>filt</A> is <Ref Filt="IsMutableDigraph"/>,
    then the digraph being created will be mutable, if <A>filt</A> is <Ref
    Filt="IsImmutableDigraph"/>, then the digraph will be immutable.
    If the optional first argument <A>filt</A> is not present, then <Ref
      Filt="IsImmutableDigraph"/> is used by default.<P/>
    
<Example><![CDATA[
gap> SquareGridGraph(5, 5);
<immutable connected bipartite symmetric digraph with bicomponent size\
s 13 and 12>
gap> GridGraph(IsMutable, 3, 4);
<mutable digraph with 12 vertices, 34 edges>
]]></Example>
  </Description>
</ManSection>
<#/GAPDoc>

<#GAPDoc Label="TriangularGridGraph">
<ManSection>
  <Oper Name="TriangularGridGraph" Arg="[filt, ]n, k"/>
  <Returns>A digraph.</Returns>
  <Description>
    If <A>n</A> and <A>k</A> are positive integers, then this operation returns
    a triangular grid graph of dimension <A>n</A> by <A>k</A>. <P/>

    A <E>triangular grid graph</E> of dimension <A>n</A> by <A>k</A> is a
    symmetric digraph constructed from the <Ref Oper="SquareGridGraph"/> of the
    same dimensions, where additionally two vertices are adjacent in the digraph
    if they are diagonally adjacent in the grid, on a particular one of the
    diagonals.
    The correspondence between vertices and grid positions is given by <Ref
      Oper="DigraphVertexLabels"/>.
    More specifically, the particular diagonal is the one such that,
    the vertices corresponding to the grid positions <C>[2,1]</C> and
    <C>[1,2]</C> are adjacent (if they exist),
    but those corresponding to <C>[1,1]</C> and <C>[2,2]</C> are not. <P/>

    See <URL>https://en.wikipedia.org/wiki/Lattice_graph#Other_kinds</URL>
    for more information.  <P/>
    
    If the optional first argument <A>filt</A> is present, then this should
    specify the category or representation the digraph being created will
    belong to. For example, if <A>filt</A> is <Ref Filt="IsMutableDigraph"/>,
    then the digraph being created will be mutable, if <A>filt</A> is <Ref
    Filt="IsImmutableDigraph"/>, then the digraph will be immutable.
    If the optional first argument <A>filt</A> is not present, then <Ref
      Filt="IsImmutableDigraph"/> is used by default.<P/>

<Example><![CDATA[
gap> TriangularGridGraph(3, 3);
<immutable connected symmetric digraph with 9 vertices, 32 edges>
gap> TriangularGridGraph(IsMutable, 3, 3);
<mutable digraph with 9 vertices, 32 edges>
]]></Example>
  </Description>
</ManSection>
<#/GAPDoc>

<#GAPDoc Label="StarDigraph">
<ManSection>
  <Oper Name="StarDigraph" Arg="[filt, ]k"/>
  <Returns>A digraph.</Returns>
  <Description>
    If <A>k</A> is a positive integer, then this operation returns the
    <E>star digraph</E> with <A>k</A> vertices, which is the
    undirected tree in which vertex <C>1</C> is adjacent to all other
    vertices.  If <A>k</A> is at least <C>2</C>, then this is the complete
    bipartite digraph with bicomponents
    <C>[1]</C> and <C>[2 .. <A>k</A>]</C>. <P/>
    
    See <Ref Prop="IsUndirectedTree"/>, <Ref Prop="IsCompleteBipartiteDigraph"/>,
    and <Ref Attr="DigraphBicomponents"/>. <P/>

    If the optional first argument <A>filt</A> is present, then this should
    specify the category or representation the digraph being created will
    belong to. For example, if <A>filt</A> is <Ref Filt="IsMutableDigraph"/>,
    then the digraph being created will be mutable, if <A>filt</A> is <Ref
    Filt="IsImmutableDigraph"/>, then the digraph will be immutable. 
    If the optional first argument <A>filt</A> is not present, then <Ref
      Filt="IsImmutableDigraph"/> is used by default.<P/>
    <Example><![CDATA[
gap> StarDigraph(IsMutable, 10);
<mutable digraph with 10 vertices, 18 edges>
gap> StarDigraph(5);
<immutable complete bipartite digraph with bicomponent sizes 1 and 4>
gap> IsSymmetricDigraph(StarDigraph(3));
true
gap> IsUndirectedTree(StarDigraph(3));
true
]]></Example>
  </Description>
</ManSection>
<#/GAPDoc>

<#GAPDoc Label="KnightsGraph">
<ManSection>
  <Oper Name="KnightsGraph" Arg="[filt, ]m, n"/>
  <Returns>A digraph.</Returns>
  <Description>
    If <A>m</A> and <A>n</A> are both positive integers, then this operation
    returns the <E>Knight's Graph</E> for a <A>m</A> by <A>n</A> board. <P/>

    From
    <URL>https://en.wikipedia.org/wiki/Knight%27s_graph</URL>:
    <P/>

    <Q>In graph theory, a knight's graph, or a knight's tour graph, is a
    graph that represents all legal moves of the knight chess piece on a
    chessboard.  Each vertex of this graph represents a square of the
    chessboard, and each edge connects two squares that are a knight's move
    apart from each other. More specifically, an <A>m</A> by <A>n</A> knight's
    graph is a knight's graph of an <A>m</A> by <A>n</A> chessboard.</Q>
    <P/>

    If the optional first argument <A>filt</A> is present, then this should
    specify the category or representation the digraph being created will
    belong to. For example, if <A>filt</A> is <Ref Filt="IsMutableDigraph"/>,
    then the digraph being created will be mutable, if <A>filt</A> is <Ref
    Filt="IsImmutableDigraph"/>, then the digraph will be immutable.
    If the optional first argument <A>filt</A> is not present, then <Ref
      Filt="IsImmutableDigraph"/> is used by default.<P/>

<Example><![CDATA[
gap> D := KnightsGraph(8, 8);
<immutable connected symmetric digraph with 64 vertices, 336 edges>
gap> IsConnectedDigraph(D);
true
gap> D := KnightsGraph(3, 3);
<immutable symmetric digraph with 9 vertices, 16 edges>
gap> IsConnectedDigraph(D);
false
gap> KnightsGraph(IsMutable, 3, 9);
<mutable digraph with 27 vertices, 88 edges>
]]></Example>
  </Description>
</ManSection>
<#/GAPDoc>

<#GAPDoc Label="HaarGraph">
<ManSection>
  <Oper Name="HaarGraph" Arg="[filt, ]n"/>
  <Returns>A digraph.</Returns>
  <Description>
    If <A>n</A> is a positive integer then this operation returns
    the <E>Haar graph</E> <M>H(<A>n</A>)</M>. <P/>

    From
    <URL>https://mathworld.wolfram.com/HaarGraph.html</URL>:
    <P/>

    <Q>A Haar graph H(<A>n</A>) is a bipartite regular vertex-transitive graph
    indexed by a positive integer and obtained by a simple binary encoding of
    cyclically adjacent vertices. Haar graphs may be connected or
    disconnected.</Q><P/>

    The number of vertices in the Haar graph <M>H(<A>n</A>)</M> is
    equal to twice <M>m</M>, where <M>m</M> is the number of digits
    required to represent <A>n</A> in binary.
    These vertices are arranged into bicomponents
    <C>[1..m]</C> and <C>[m+1..2*m]</C>.
    Vertices <M>i</M> and <M>j</M> in different bicomponents are
    adjacent by a symmetric pair of edges if and only if
    the binary representation of <A>n</A> has a 1 in position
    (<M>j-i</M> modulo <M>m</M>) + 1 from the left. <P/>

    If the optional first argument <A>filt</A> is present, then this should
    specify the category or representation the digraph being created will
    belong to. For example, if <A>filt</A> is <Ref Filt="IsMutableDigraph"/>,
    then the digraph being created will be mutable, if <A>filt</A> is <Ref
    Filt="IsImmutableDigraph"/>, then the digraph will be immutable.
    If the optional first argument <A>filt</A> is not present, then <Ref
      Filt="IsImmutableDigraph"/> is used by default.<P/>

<Example><![CDATA[
gap> HaarGraph(3);
<immutable bipartite vertex-transitive symmetric digraph with bicompon\
ent sizes 2 and 2>
gap> D := HaarGraph(16);
<immutable bipartite vertex-transitive symmetric digraph with bicompon\
ent sizes 5 and 5>
]]></Example>
  </Description>
</ManSection>
<#/GAPDoc>

<#GAPDoc Label="BananaTree">
<ManSection>
  <Oper Name="BananaTree" Arg="[filt, ]n, k"/>
  <Returns>A digraph</Returns>
  <Description>
    If <A>n</A> and <A>k</A> are positive integers with <A>k</A> greater than <M>1</M>,
    then this operation returns the <E>banana tree</E>
    with parameters <A>n</A> and <A>k</A>, as defined below. <P/>

    From
    <URL>https://mathworld.wolfram.com/BananaTree.html</URL>:
    <P/>

    <Q>An <C>(<A>n</A>,<A>k</A>)</C>-banana tree,
    as defined by Chen et al. (1997), is a graph obtained by
    connecting one leaf of each of <A>n</A> copies of an <A>k</A>-star graph
    with a single root vertex that is distinct from all the stars.</Q>
    <P/>
    
    Specifically, in the resulting digraph, vertex <C>1</C> is the 'root',
    and for each <C>m</C> in <C>[1 .. <A>k</A>]</C>,
    the <C>m</C>th star is on the vertices
    <C>[((m - 1) * n) + 2 .. (m * n) + 1]</C>,
    with the first of these being the 'centre' of the star,
    and the second being the 'leaf' adjacent <C>1</C>. <P/>
    
    If the optional first argument <A>filt</A> is present, then this should
    specify the category or representation the digraph being created will
    belong to. For example, if <A>filt</A> is <Ref Filt="IsMutableDigraph"/>,
    then the digraph being created will be mutable, if <A>filt</A> is <Ref
    Filt="IsImmutableDigraph"/>, then the digraph will be immutable.
    If the optional first argument <A>filt</A> is not present, then <Ref
      Filt="IsImmutableDigraph"/> is used by default.<P/>

    See also <Ref Oper="StarDigraph"/> and <Ref Prop="IsUndirectedTree"/>.
<Example><![CDATA[
gap> D := BananaTree(2, 4);
<immutable undirected tree digraph with 9 vertices>
gap> D := BananaTree(3, 3);
<immutable undirected tree digraph with 10 vertices>
gap> D := BananaTree(5, 2);
<immutable undirected tree digraph with 11 vertices>
gap> D := BananaTree(3, 4);
<immutable undirected tree digraph with 13 vertices>
]]></Example>
  </Description>
</ManSection>
<#/GAPDoc>

<#GAPDoc Label="TadpoleDigraph">
<ManSection>
  <Oper Name="TadpoleDigraph" Arg="[filt, ]m, n"/>
  <Returns>A digraph.</Returns>
  <Description>
    The <E>Tadpole digraph</E> is the symmetric closure of the disjoint union
    of the cycle digraph on <C>[1..<A>m</A>]</C> (the 'head' of the tadpole)
    and the chain digraph on <C>[<A>m</A>+1..<A>m</A>+<A>n</A>]</C>
    (the 'tail' of the tadpole), along with the additional
    edges <C>[1, <A>m</A>+1]</C> and <C>[1, <A>m</A>+1]</C>
    which connect the 'head' and the 'tail'. For more details on the Tadpole digraph
    please refer to <URL>https://en.wikipedia.org/wiki/Tadpole_graph</URL>.<P/>

    See <Ref Oper="DigraphSymmetricClosure"/>,
    <Ref Func="DigraphDisjointUnion" Label="for a list of digraphs"/>,
    <Ref Oper="CycleDigraph"/>, and <Ref Oper="ChainDigraph"/>. <P/>

    If the optional first argument <A>filt</A> is present, then this should
    specify the category or representation the digraph being created will
    belong to. For example, if <A>filt</A> is <Ref Filt="IsMutableDigraph"/>,
    then the digraph being created will be mutable, if <A>filt</A> is <Ref
    Filt="IsImmutableDigraph"/>, then the digraph will be immutable. 
    If the optional first argument <A>filt</A> is not present, then <Ref
      Filt="IsImmutableDigraph"/> is used by default.<P/>

    <Example><![CDATA[
gap> TadpoleDigraph(10, 15);
<immutable symmetric digraph with 25 vertices, 50 edges>
gap> TadpoleDigraph(IsMutableDigraph, 5, 6);
<mutable digraph with 11 vertices, 22 edges>
gap> IsSymmetricDigraph(TadpoleDigraph(3, 5));
true
]]></Example>
  </Description>
</ManSection>
<#/GAPDoc>

